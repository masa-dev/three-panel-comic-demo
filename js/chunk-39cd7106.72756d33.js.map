{"version":3,"sources":["webpack:///./node_modules/node-libs-browser/mock/process.js","webpack:///./src/views/Group.vue?aeee","webpack:///./node_modules/@firebase/database-compat/dist/index.esm2017.js","webpack:///src/views/Group.vue","webpack:///./src/views/Group.vue?6ac2","webpack:///./src/views/Group.vue","webpack:///./node_modules/@firebase/database/dist/index.esm2017.js","webpack:///./node_modules/path-browserify/index.js"],"names":["exports","nextTick","fn","args","Array","prototype","slice","call","arguments","shift","setTimeout","apply","platform","arch","execPath","title","pid","browser","env","argv","binding","name","Error","path","cwd","chdir","dir","resolve","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","render","_vm","this","_h","$createElement","_c","_self","attrs","group","_v","_e","isJoin","staticRenderFns","logClient","warn","msg","message","validateBoolean","fnName","argumentName","bool","optional","undefined","validateEventType","eventType","_delegate","onComplete","length","result","cancel","then","error","remove","value","set","priority","setWithPriority","objectToMerge","isArray","newObjectToMerge","i","update","committed","snapshot","toJSON","_database","val","exportVal","exists","String","child","hasChild","action","forEach","expDataSnapshot","hasChildren","key","size","ref","getRef","database","callback","cancelCallbackOrContext","context","_a","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","previousChildName","userCallback","cancelCallback","bind","failureCallbackOrContext","deferred","reject","onlyOnce","promise","limit","toString","other","isEqual","cancelOrContext","_repo","_path","super","pathString","parent","root","newVal","values","newPriority","transactionUpdate","applyLocally","transactionResult","expPromise","expRef","catch","getKey","getParent","getRoot","app","INTERNAL","delete","_delete","host","port","options","childRef","url","apiName","initStandalone","version","customAuthImpl","namespace","nodeAdmin","authProvider","setComponent","instance","ServerValue","TIMESTAMP","increment","delta","Object","freeze","__proto__","registerDatabase","registerComponent","container","instanceIdentifier","getProvider","getImmediate","databaseExp","identifier","setServiceProps","Reference","Query","Database","DataSnapshot","enableLogging","setMultipleInstances","registerVersion","data","mounted","user","userGroupRef","on","groupId","console","log","unsubscribe","component","SDK_VERSION","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","LUIDGenerator","id","sha1","str","utf8Bytes","sha1Bytes","digest","encodeByteArray","buildLogMessage_","varArgs","arg","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","get","logWrapper","prefix","fatal","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","document","readyState","called","wrappedFn","body","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","forceRefresh","getToken","Promise","listener","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","secure","webSocketOnly","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","newHost","isCacheableHost","toURLString","repoInfoNeedsQueryParam","repoInfo","isCustomHost","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","counters_","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","responseNum","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","close","myDisconnFrame","removeChild","shutdown_","dataStr","incrementCounter","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","open","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","nextSeg","d","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","add","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","process","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","clearInterval","setInterval","send","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","ALL_TRANSPORTS","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","ServerActions","hash","token","stats","EventEmitter","allowedEvents_","listeners_","listeners","validateEventType_","eventData","getInitialEvent","splice","find","et","OnlineMonitor","online_","trigger","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","onResponse","curReqNum","r","sendRequest","initConnection_","request","p","q","_queryObject","outstandingGet","index","sendGet_","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","listen","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","serverTimeOffset","put","map","normalizedPathString","statusCode","explanation","notifyForInvalidToken","replace","queries","clientName","reportStats","currentlyOnline","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","KeyIndex","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","isEmpty","LLRBNode","color","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","newIndex","next","getNext","isDefinedOn","getCompare","indexName","newIndexSet","assign","newIndexes","indexedChildren","existingSnap","newChildren","ChildrenNode","children_","indexMap_","Default","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","MAX_NODE","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","trackChildChange","withIndex","newSnap","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","queryParamsGetNodeFilter","queryParams","hasLimit","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","indexedValueChanged","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","getPredecessorChildName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","fullPath","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","from","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","getChanges","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","filtersNodes","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","isCompleteForPath","getCompleteChild","newEventSnap","viewProcessorCacheHasChild","curViewCache","foreach","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","fromObject","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","foreachChild","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","splitIndex","fold","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePriority","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","unlisten","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","repoGetValue","cached","err","repoLog","repoSetWithPriority","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","onDisconnectCancel","repoOnDisconnectSet","onDisconnectPut","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","onDisconnectMerge","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","resume","repoStartTransaction","unwatcher","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","CancelEvent","CallbackContext","snapshotCallback","hasCancelCallback","OnDisconnect","wrapCallback","QueryImpl","_orderByCalled","ReferenceImpl","sameRepo","samePath","sameQueryIdentifier","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","hasAnchoredLimit","parentPath","_node","_index","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","ValueEventRegistration","callbackContext","getEventType","onCancel","onValue","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","off","expCallback","QueryConstraint","QueryEndAtConstraint","_value","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","_apply","equalTo","queryConstraints","queryImpl","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","repoManagerDeleteRepo","appName","appRepos","_repoInternal","_instanceStarted","_rootInternal","connectDatabaseEmulator","mockUserToken","goOffline","goOnline","variant","SERVER_TIMESTAMP","serverTimestamp","TransactionResult","runTransaction","promiseComplete","simpleListen","echo","onEcho","normalizeArray","parts","allowAboveRoot","up","unshift","basename","end","matchedSlash","charCodeAt","xs","resolvedPath","resolvedAbsolute","TypeError","normalize","isAbsolute","trailingSlash","paths","relative","trim","arr","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","hasRoot","ext","extname","startDot","startPart","preDotState"],"mappings":"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","file":"js/chunk-39cd7106.72756d33.js","sourcesContent":["exports.nextTick = function nextTick(fn) {\n    var args = Array.prototype.slice.call(arguments);\n    args.shift();\n    setTimeout(function () {\n        fn.apply(null, args);\n    }, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"group\"}},[(_vm.group.isJoin)?_c('div',[_c('h2',[_vm._v(\"所属グループ\")])]):_vm._e(),(!_vm.group.isJoin)?_c('div',[_c('h2',[_vm._v(\"グループ\")]),_c('p',[_vm._v(\"現在、グループに所属していません。\")])]):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import firebase from '@firebase/app-compat';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\nconst name = \"@firebase/database-compat\";\nconst version = \"0.1.4\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database-compat');\r\nconst warn = function (msg) {\r\n    const message = 'FIREBASE WARNING: ' + msg;\r\n    logClient.warn(message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\r\n    if (optional && bool === undefined) {\r\n        return;\r\n    }\r\n    if (typeof bool !== 'boolean') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\r\n    }\r\n};\r\nconst validateEventType = function (fnName, eventType, optional) {\r\n    if (optional && eventType === undefined) {\r\n        return;\r\n    }\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(errorPrefix(fnName, 'eventType') +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass OnDisconnect {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    cancel(onComplete) {\r\n        validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\r\n        const result = this._delegate.cancel();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\r\n        const result = this._delegate.remove();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    set(value, onComplete) {\r\n        validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\r\n        const result = this._delegate.set(value);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(value, priority, onComplete) {\r\n        validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = this._delegate.setWithPriority(value, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(objectToMerge, onComplete) {\r\n        validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        if (Array.isArray(objectToMerge)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\r\n        const result = this._delegate.update(objectToMerge);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass TransactionResult {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     */\r\n    constructor(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nclass DataSnapshot {\r\n    constructor(_database, _delegate) {\r\n        this._database = _database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    val() {\r\n        validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this._delegate.val();\r\n    }\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    exportVal() {\r\n        validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this._delegate.exportVal();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @returns Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    exists() {\r\n        validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return this._delegate.exists();\r\n    }\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns DataSnapshot for child node.\r\n     */\r\n    child(path) {\r\n        validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        path = String(path);\r\n        _validatePathString('DataSnapshot.child', 'path', path, false);\r\n        return new DataSnapshot(this._database, this._delegate.child(path));\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns Whether the child exists.\r\n     */\r\n    hasChild(path) {\r\n        validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        _validatePathString('DataSnapshot.hasChild', 'path', path, false);\r\n        return this._delegate.hasChild(path);\r\n    }\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @returns The priority.\r\n     */\r\n    getPriority() {\r\n        validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        return this._delegate.priority;\r\n    }\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each child.\r\n     * @returns True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    forEach(action) {\r\n        validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        validateCallback('DataSnapshot.forEach', 'action', action, false);\r\n        return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\r\n    }\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    hasChildren() {\r\n        validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        return this._delegate.hasChildren();\r\n    }\r\n    get key() {\r\n        return this._delegate.key;\r\n    }\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @returns The number of children that this DataSnapshot contains.\r\n     */\r\n    numChildren() {\r\n        validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this._delegate.size;\r\n    }\r\n    /**\r\n     * @returns The Firebase reference for the location this snapshot's data came\r\n     * from.\r\n     */\r\n    getRef() {\r\n        validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return new Reference(this._database, this._delegate.ref);\r\n    }\r\n    get ref() {\r\n        return this.getRef();\r\n    }\r\n}\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nclass Query {\r\n    constructor(database, _delegate) {\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    on(eventType, callback, cancelCallbackOrContext, context) {\r\n        var _a;\r\n        validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateCallback('Query.on', 'callback', callback, false);\r\n        const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            default:\r\n                throw new Error(errorPrefix('Query.on', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', eventType, true);\r\n        validateCallback('Query.off', 'callback', callback, true);\r\n        validateContextObject('Query.off', 'context', context, true);\r\n        if (callback) {\r\n            const valueCallback = () => { };\r\n            valueCallback.userCallback = callback;\r\n            valueCallback.context = context;\r\n            off(this._delegate, eventType, valueCallback);\r\n        }\r\n        else {\r\n            off(this._delegate, eventType);\r\n        }\r\n    }\r\n    /**\r\n     * Get the server-value for this query, or return a cached value if not connected.\r\n     */\r\n    get() {\r\n        return get(this._delegate).then(expSnapshot => {\r\n            return new DataSnapshot(this.database, expSnapshot);\r\n        });\r\n    }\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     */\r\n    once(eventType, callback, failureCallbackOrContext, context) {\r\n        validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateCallback('Query.once', 'callback', callback, true);\r\n        const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\r\n        const deferred = new Deferred();\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            const result = new DataSnapshot(this.database, expSnapshot);\r\n            if (callback) {\r\n                callback.call(ret.context, result, previousChildName);\r\n            }\r\n            deferred.resolve(result);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (error) => {\r\n            if (ret.cancel) {\r\n                ret.cancel.call(ret.context, error);\r\n            }\r\n            deferred.reject(error);\r\n        };\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            default:\r\n                throw new Error(errorPrefix('Query.once', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     */\r\n    limitToFirst(limit) {\r\n        validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToFirst(limit)));\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     */\r\n    limitToLast(limit) {\r\n        validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToLast(limit)));\r\n    }\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     */\r\n    orderByChild(path) {\r\n        validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByChild(path)));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     */\r\n    orderByKey() {\r\n        validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByKey()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     */\r\n    orderByPriority() {\r\n        validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByPriority()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     */\r\n    orderByValue() {\r\n        validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByValue()));\r\n    }\r\n    startAt(value = null, name) {\r\n        validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAt(value, name)));\r\n    }\r\n    startAfter(value = null, name) {\r\n        validateArgCount('Query.startAfter', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAfter(value, name)));\r\n    }\r\n    endAt(value = null, name) {\r\n        validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endAt(value, name)));\r\n    }\r\n    endBefore(value = null, name) {\r\n        validateArgCount('Query.endBefore', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endBefore(value, name)));\r\n    }\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     */\r\n    equalTo(value, name) {\r\n        validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, equalTo(value, name)));\r\n    }\r\n    /**\r\n     * @returns URL for this location.\r\n     */\r\n    toString() {\r\n        validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this._delegate.toString();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    toJSON() {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     */\r\n    isEqual(other) {\r\n        validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param fnName - The function name (on or once)\r\n     *\r\n     */\r\n    static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\r\n        const ret = { cancel: undefined, context: undefined };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            validateCallback(fnName, 'cancel', ret.cancel, true);\r\n            ret.context = context;\r\n            validateContextObject(fnName, 'context', ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(errorPrefix(fnName, 'cancelOrContext') +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    get ref() {\r\n        return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\r\n    }\r\n}\r\nclass Reference extends Query {\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     */\r\n    constructor(database, _delegate) {\r\n        super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /** @returns {?string} */\r\n    getKey() {\r\n        validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        return this._delegate.key;\r\n    }\r\n    child(pathString) {\r\n        validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        return new Reference(this.database, child(this._delegate, pathString));\r\n    }\r\n    /** @returns {?Reference} */\r\n    getParent() {\r\n        validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        const parent = this._delegate.parent;\r\n        return parent ? new Reference(this.database, parent) : null;\r\n    }\r\n    /** @returns {!Reference} */\r\n    getRoot() {\r\n        validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        return new Reference(this.database, this._delegate.root);\r\n    }\r\n    set(newVal, onComplete) {\r\n        validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateCallback('Reference.set', 'onComplete', onComplete, true);\r\n        const result = set(this._delegate, newVal);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(values, onComplete) {\r\n        validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        if (Array.isArray(values)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < values.length; ++i) {\r\n                newObjectToMerge['' + i] = values[i];\r\n            }\r\n            values = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        _validateWritablePath('Reference.update', this._delegate._path);\r\n        validateCallback('Reference.update', 'onComplete', onComplete, true);\r\n        const result = update(this._delegate, values);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(newVal, newPriority, onComplete) {\r\n        validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = setWithPriority(this._delegate, newVal, newPriority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateCallback('Reference.remove', 'onComplete', onComplete, true);\r\n        const result = remove(this._delegate);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    transaction(transactionUpdate, onComplete, applyLocally) {\r\n        validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\r\n        validateCallback('Reference.transaction', 'onComplete', onComplete, true);\r\n        validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\r\n        const result = runTransaction(this._delegate, transactionUpdate, {\r\n            applyLocally\r\n        }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\r\n        if (onComplete) {\r\n            result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\r\n        }\r\n        return result;\r\n    }\r\n    setPriority(priority, onComplete) {\r\n        validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\r\n        const result = setPriority(this._delegate, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    push(value, onComplete) {\r\n        validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateCallback('Reference.push', 'onComplete', onComplete, true);\r\n        const expPromise = push(this._delegate, value);\r\n        const promise = expPromise.then(expRef => new Reference(this.database, expRef));\r\n        if (onComplete) {\r\n            promise.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        const result = new Reference(this.database, expPromise);\r\n        result.then = promise.then.bind(promise);\r\n        result.catch = promise.catch.bind(promise, undefined);\r\n        return result;\r\n    }\r\n    onDisconnect() {\r\n        _validateWritablePath('Reference.onDisconnect', this._delegate._path);\r\n        return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\r\n    }\r\n    get key() {\r\n        return this.getKey();\r\n    }\r\n    get parent() {\r\n        return this.getParent();\r\n    }\r\n    get root() {\r\n        return this.getRoot();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n */\r\nclass Database {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     */\r\n    constructor(_delegate, app) {\r\n        this._delegate = _delegate;\r\n        this.app = app;\r\n        this.INTERNAL = {\r\n            delete: () => this._delegate._delete()\r\n        };\r\n    }\r\n    /**\r\n     * Modify this instance to communicate with the Realtime Database emulator.\r\n     *\r\n     * <p>Note: This method must be called before performing any other operation.\r\n     *\r\n     * @param host - the emulator host (ex: localhost)\r\n     * @param port - the emulator port (ex: 8080)\r\n     * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n     */\r\n    useEmulator(host, port, options = {}) {\r\n        connectDatabaseEmulator(this._delegate, host, port, options);\r\n    }\r\n    ref(path) {\r\n        validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            const childRef = refFromURL(this._delegate, path.toString());\r\n            return new Reference(this, childRef);\r\n        }\r\n        else {\r\n            const childRef = ref(this._delegate, path);\r\n            return new Reference(this, childRef);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @returns Firebase reference.\r\n     */\r\n    refFromURL(url) {\r\n        const apiName = 'database.refFromURL';\r\n        validateArgCount(apiName, 1, 1, arguments.length);\r\n        const childRef = refFromURL(this._delegate, url);\r\n        return new Reference(this, childRef);\r\n    }\r\n    // Make individual repo go offline.\r\n    goOffline() {\r\n        validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        return goOffline(this._delegate);\r\n    }\r\n    goOnline() {\r\n        validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        return goOnline(this._delegate);\r\n    }\r\n}\r\nDatabase.ServerValue = {\r\n    TIMESTAMP: serverTimestamp(),\r\n    increment: (delta) => increment(delta)\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction initStandalone({ app, url, version, customAuthImpl, namespace, nodeAdmin = false }) {\r\n    _setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* PRIVATE */));\r\n    return {\r\n        instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, \r\n        /* appCheckProvider= */ undefined, url, nodeAdmin), app),\r\n        namespace\r\n    };\r\n}\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    instance.INTERNAL.registerComponent(new Component('database-compat', (container, { instanceIdentifier: url }) => {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const databaseExp = container\r\n            .getProvider('database')\r\n            .getImmediate({ identifier: url });\r\n        return new Database(databaseExp, app);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(\r\n    // firebase.database namespace properties\r\n    {\r\n        Reference,\r\n        Query,\r\n        Database,\r\n        DataSnapshot,\r\n        enableLogging,\r\n        INTERNAL,\r\n        ServerValue\r\n    })\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterDatabase(firebase);\n\nexport { registerDatabase };\n//# sourceMappingURL=index.esm2017.js.map\n","<template>\n  <div id=\"group\">\n    <div v-if=\"group.isJoin\">\n      <h2>所属グループ</h2>\n    </div>\n    <div v-if=\"!group.isJoin\">\n      <h2>グループ</h2>\n      <p>現在、グループに所属していません。</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport firebaseConfig from \"@/util/firebaseConfig.js\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/database\";\n\nexport default {\n  data() {\n    return {\n      group: {\n        isJoin: false,\n        name: \"\",\n      },\n    };\n  },\n  mounted() {\n    firebase.initializeApp(firebaseConfig);\n\n    let unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        let user = firebase.auth().currentUser;\n        let userGroupRef = firebase.database().ref(`users/${user.uid}/group`);\n\n        userGroupRef.on(\"value\", (snapshot) => {\n          let groupId = snapshot.val();\n\n          if (groupId) {\n            console.log(groupId);\n            this.group.isJoin = true;\n          }\n\n          // グループに所属していない場合\n          else {\n            this.group.isJoin = false;\n          }\n        });\n        console.log(user, userGroupRef, user.uid);\n      }\n\n      unsubscribe();\n    });\n  },\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Group.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Group.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Group.vue?vue&type=template&id=21adc0c2&\"\nimport script from \"./Group.vue?vue&type=script&lang=js&\"\nexport * from \"./Group.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.12.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined') {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n"],"sourceRoot":""}